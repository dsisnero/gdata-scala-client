#summary A short introduction to the Scala client library for GData
= Introduction =

Currently the GData Scala client library supports only the [http://code.google.com/apis/youtube/reference.html YouTube API]. This document presents its main features.

*This document is still under development.*

= Installation =

The Scala client library has the following dependencies:
 * A working [http://scala-lang.org Scala] installation newer than 2.7.0-final. That means a [http://www.scala-lang.org/downloads/distrib/files/nightly/ nightly build], until a bugfix release is issued to deal with [https://lampsvn.epfl.ch/trac/scala/ticket/632 this bug].

If you intend to build from sources, you also need:
 * [http://ant.apache.org ant].
 * [http://www.junit.org/ junit] and [http://code.google.com/p/gdata-scala-client xmldiff] for running unit tests (found under lib/ in the root project directory).
 * [http://emma.sourceforge.net/ emma] for code coverage (found under lib/ in the root project directory).

= Library Overview =

The Scala client library uses an approach similar to combinator parsing for handling XML serialization. See DevelopersGuide for more details on the implementation. The XML serialization core is found in package `com.google.xml.combinators`, while the GData definitions are in `com.google.gdata.data`. Supported services have specific data under their own package under `com.google.gdata`. Currently there is only youtube: `com.google.gdata.youtube`.

The library goes to great lengths to provide a type-safe layer on top of the underlying XML protocol. Whenever possible, Scala data types are used to represent the underlying data. Here is a high level view of the conventions followed throughout the library:
 * whenever a piece of data is optional, it is represented as an `Option[T]`.
 * whenever a default value is specified for an element or attribute, such data is represented as a value of the right type, and the default value is filled in when parsing.
 * all data is mutable. This allows for services where update is allowed.
 * serialization code is separated from data representation. Picklers (the name for serialization code) are usually found as values in the companion object of data classes.
 * errors in the HTTP transport layer are signaled as exceptions.

= Building the library =

To build the library, check out the source code [http://code.google.com/p/gdata-scala-client/source/checkout] and `cd` into your working copy. Type `ant` to build the sources (make sure `SCALA_HOME` points to the installation directory of your [http://scala-lang.org Scala] distribution). Type `ant test` to build and run tests.

= Making a video query =

To get started, we will use the Scala interpreter. It has the advantage that it gives immediate feedback. Let's start the interpreter, giving the path to the library (assuming the current directory is the project directory, and the library has been built using the default output directory, `classes/`:

{{{
$ scala -cp classes/
Welcome to Scala version 2.7.0-final (Java HotSpot(TM) Server VM, Java 1.5.0_07).
Type in expressions to have them evaluated.
Type :help for more information.

scala>
}}}

Next we need to create a service object. This object will handle communication with the server, authentication, and provides handy methods for making queries.

{{{
scala> import com.google.gdata.youtube._
import com.google.gdata.youtube._

scala> val s = new YouTubeService("mycomp-myapp-1.0")
}}}

The argument gives the application name, using the recommended naming scheme: Company '-' Application '-' version. Next we make a query and check the result:

{{{
scala> for (e <- s.getVideos(YouTubeQuery.empty / "Comedy")) println(e.rating)
Some(4.9/5 out of 5708)
Some(4.94/5 out of 1130)
Some(4.84/5 out of 6950)
Some(4.94/5 out of 3206)
Some(4.9/5 out of 10655)
Some(4.87/5 out of 8797)
Some(4.79/5 out of 11602)
Some(4.87/5 out of 23730)
Some(4.9/5 out of 17113)
Some(4.85/5 out of 12878)
Some(4.9/5 out of 22885)
Some(4.89/5 out of 7997)
Some(4.93/5 out of 3836)
Some(4.92/5 out of 9611)
Some(4.83/5 out of 8453)
Some(4.87/5 out of 8078)
Some(4.8/5 out of 11137)
Some(4.92/5 out of 10542)
Some(4.94/5 out of 2957)
Some(4.9/5 out of 2414)
Some(4.95/5 out of 2590)
Some(4.91/5 out of 19807)
Some(4.89/5 out of 18001)
Some(4.91/5 out of 20595)
Some(4.88/5 out of 2503)
}}}

Our query retrieves videos in the 'Comedy' category and prints their rating. Notice that feeds support for comprehensions and that rating elements, being optional, are wrapped into `Some` objects. By default, GData servers return the first 25 results, so let's make a more complex query to retrieve the next ten entries:
{{{
scala> for (e <- s.getVideos(YouTubeQuery.empty / "Comedy" startIndex(26) maxResults(10))) println(e.title)
(Some(text),Frank Caliendo - Impressions)
(Some(text),Jeff Dunham and Peanut part 2)
(Some(text),This is why 11yr olds don't raid)
(Some(text),Achmed - O terrorista morto (Legendado))
(Some(text),Jeff Dunham (Spark Of Insanity) pt. 1)
(Some(text),W?atcy Móch - Pozytywna wibracja)
(Some(text),Dave Chappelle's Funny Ass Shit)
(Some(text),Jim Carrey)
(Some(text),Jeff Dunham and Peanut (Part 1))
(Some(text),Horst Schlämmer bei "Wer wird Millionär" (4/4))
}}}

Queries have two components: a category search part (delimited by '/'), and a search query part, introduced by `matching`. Let's query the server for all videos in the Comedy category that match the word 'carlin' and don't match 'religion':
{{{
scala> for (e <- s.getVideos(YouTubeQuery.empty / "Comedy" matching Text("carlin") & !Text("religion"))) println(e.title)
(Some(text),George Carlin - Modern Man)
(Some(text),George Carlin - The American Dream)
(Some(text),George Carlin on white people)
(Some(text),George Carlin Airport Security)
(Some(text),YOU HAVE NO RIGHTS - George Carlin)
(Some(text),George Carlin - Voting)
(Some(text),george carlin nails it)
(Some(text),George Carlin: Again! - 1978 (Part 1 of 8))
(Some(text),George Carlin - Saving the Planet)
(Some(text),Dirty words)
(Some(text),George Carlin describing the real world)
...
}}}

For a complete description of the query language, check the scala doc documentation on `Query` and `YouTubeQuery`.

= Navigation =

Video feeds are interconnected: there are links to comment, video responses, related videos, and so on. The service object has support for the most common links. Here's an example to get related videos of a given video:

{{{
scala> val feed = s.getVideos(YouTubeQuery.empty / "Comedy" matching Text("carlin") & Text("religion"))
feed: s.videos.Feed =
Authors: (YouTube,Some(http://www.youtube.com/),None)
Id: http://gdata.youtube.com/feeds/api/videos
Title: (Some(text),YouTube Videos matching query: carlin religion)
Updated: 2008-03-25T16:11:45.601Z
Entries: Entry:
        Authors: (jvictorthegreat,Some(http://gdata.youtube.com/feeds/api/users/jvictorthegreat),None)
        Id: http://gdata.youtube.com/feeds/api/videos/CF1-...
}}}

Once we saved the video feed, we can choose an entry and navigate to its related videos. Let's assume we have at least one entry and we want to retrieve related videos to the first one:

{{{
scala> for (feed <- s.getRelatedVideos(feed.entries.head); e <- feed) println(e.title)
(Some(text),George Carlin- Guys named Todd)
(Some(text),O PAPA NO BRASIL)
(Some(text),Discurso do Capeta)
(Some(text),BRUTAL BOXING)
(Some(text),Apometria e regressão - Rosana Beni (4 de 10))
(Some(text),10 coisas para se pensar)
(Some(text),Design Inteligente x Teoria da Evolução - Parte 10)
(Some(text),Forum Espiritual Mundial)
(Some(text),Gado marcado - gado feliz?)
...
}}}

The for-comprehension above has to generators: the first one works on the optional feed (some videos might not have a related videos link), while the second iterates over all entries in the given feed.

In a similar way, the service object provides access to user profiles, comment feeds or video responses. Check the complete scaladoc documentation on `YouTubeService` for more information.

= Raw queries =

To retrieve a feed from an arbitrary URL, use the `getVideos` method on the service object passing it the URL directly. The following call retrieves the top rated videos:

{{{
scala> for (e <- s.getVideos("http://gdata.youtube.com/feeds/api/standardfeeds/top_rated")) println(e.title)
(Some(text),Peanut - Video #3                 Part 3)
(Some(text),Joyful Joyful - Sister Act 2)
(Some(text),Head Tracking for Desktop VR Displays using the WiiRemote)
(Some(text),Imogen Heap - Just For Now (live at Studio 11 103.1FM))
(Some(text),Arby 'n' the Chief: Episode 3 - "Attitude")
(Some(text),The3tenors-Carreras-Domingo-Pavarotti--Nessun Dorma)
(Some(text),Jeff Dunham and Peanut part 2)
...
}}}